import hashlib
import sqlite3
from statistics import mean
import xmltodict
from flask import Flask, render_template, request, url_for, flash, redirect, jsonify, Response, session
from werkzeug.exceptions import abort
import requests
from bs4 import BeautifulSoup
from openai import OpenAI
from dotenv import load_dotenv
import os
import json
import re
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import io
import base64

# Use the 'Agg' backend which is non-interactive and suitable for server environments
matplotlib.use('Agg')

# Load the .env file
load_dotenv()

# Initialize the OpenAI client with the API key from the environment variable
client = OpenAI(
    api_key=os.getenv('OPENAI_API_KEY'),
)

app = Flask(__name__,
            static_url_path='',
            static_folder='static',
            template_folder='templates')

app.url_map.strict_slashes = False
app.config['SECRET_KEY'] = 'your secret key'


@app.route('/')
def home():
    conn = get_db_connection()
    articles = conn.execute('SELECT * FROM articles ORDER BY created DESC LIMIT 3').fetchall()
    conn.close()
    return render_template('home.html', articles=articles, render_header=True)


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        # Get form data
        username = request.form.get('username')
        password = request.form.get('password')

        # Check if all required fields are provided
        if not username or not password:
            flash('All fields (Username, Password) are required!')
            return render_template('login.html')

        hashed_pass = password + app.secret_key
        hashed_pass = hashlib.sha1(hashed_pass.encode())
        password = hashed_pass.hexdigest()

        account = get_account(username, password)

        if account:
            session['logged_in'] = True
            session['id'] = account['id']
            session['username'] = account['username']
            session['role'] = account['role']
            flash('Logged in successfully!')
            return redirect(url_for('overview'))
        else:
            flash('Combination of username and password is incorrect.')
            return render_template('login.html')

    return render_template('login.html')


@app.route('/login/logout')
def logout():
    # Remove session data, this will log the user out
    session.pop('logged_in', None)
    session.pop('id', None)
    session.pop('username', None)
    # Redirect to login page
    flash('Logged out successfully!.')
    return redirect(url_for('login'))


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        # Get form data
        username = request.form.get('username')
        password = request.form.get('password')
        email = request.form.get('email')

        # Check if all required fields are provided
        if not username or not password or not email:
            flash('All fields (Username, Password, Email Address) are required!')
            return render_template('register.html')

        account = get_account(username, password)

        if account:
            flash('An account with this username already exists!')
            return render_template('register.html')
        elif not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            flash('Invalid email address!')
            return render_template('register.html')
        elif not re.match(r'[A-Za-z0-9]+', username):
            flash('Username must contain only characters and numbers!')
            return render_template('register.html')
        else:
            hashed_pass = password + app.secret_key
            hashed_pass = hashlib.sha1(hashed_pass.encode())
            password = hashed_pass.hexdigest()

            # Insert the data into the database
            with get_db_connection() as conn:
                conn.execute('INSERT INTO accounts (username, password, email) VALUES (?, ?, ?)',
                             (username, password, email))
                conn.commit()

            flash('You have successfully registered!')
            return redirect(url_for('login'))

    return render_template('register.html')


@app.route('/account-overview')
def overview():
    if 'logged_in' in session:
        account_id = session['id']
        conn = get_db_connection()

        if session['role'] == 1:
            api_pulls = conn.execute('SELECT * FROM api_pulls').fetchall()
        else:
            api_pulls = conn.execute('''
                SELECT api_pulls.*
                FROM api_pulls
                INNER JOIN api_keys ON api_pulls.key = api_keys.id
                INNER JOIN accounts ON api_keys.account_id = accounts.id
                WHERE accounts.id = ?
            ''', (account_id,)).fetchall()

        if len(api_pulls) != 0:
            # Convert the fetched data into a DataFrame
            df = pd.DataFrame(api_pulls, columns=['id', 'created', 'key', 'origin'])
            df['created'] = pd.to_datetime(df['created'])

            bar_chart = create_bar_chart(df)
            pie_chart = create_pie_chart(df)
            top_origins = get_top_origins(df)

            return render_template('logged_in_page.html', username=session['username'], api_pulls=api_pulls, len=len(api_pulls), bar_chart=bar_chart, pie_chart=pie_chart, top_origins=top_origins)
        else:
            df = pd.DataFrame(api_pulls, columns=['id', 'created', 'key', 'origin'])
            df['created'] = pd.to_datetime(df['created'])

            top_origins = get_top_origins(df)
            return render_template('logged_in_page.html', username=session['username'], api_pulls=api_pulls, len=len(api_pulls), bar_chart='', pie_chart='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', top_origins=top_origins)

    return redirect(url_for('login'))


@app.route('/articles')
def index():
    conn = get_db_connection()
    articles = conn.execute('SELECT * FROM articles ORDER BY created DESC').fetchall()
    conn.close()
    return render_template('index.html', articles=articles)


@app.route('/articles/<int:id>')
def article(id):
    db_article = get_article(id)
    return render_template('article.html', article=db_article)


@app.route('/articles/create', methods=['GET', 'POST'])
def create():
    if 'logged_in' in session:
        if request.method == 'POST':
            # Get form data
            url = request.form.get('url')
            selector_type = request.form.get('selector_type')
            selector = request.form.get('selector')
            paragraphs = request.form.get("paragraphs") is not None

            # Check if all required fields are provided
            if not url or not selector_type or not selector:
                flash('All fields (URL, Selector Type, and Selector) are required!')
                return render_template('create.html')

            # Fetch the URL content
            response = requests.get(url)
            response.raise_for_status()

            # Parse the HTML content
            soup = BeautifulSoup(response.content, 'html.parser')

            # Select the content based on selector type
            if selector_type == 'id':
                content_div = soup.find('div', id=selector)
            elif selector_type == 'html':
                content_div = soup.select_one(selector)
            else:
                content_div = soup.find('div', class_=selector)

            # Check if content was found
            if not content_div:
                flash('No content found with the given selector!')
                return render_template('create.html')

            # Extract the text from the content div
            if paragraphs:
                # Extract text from all paragraphs if paragraphs option is selected
                article_text = ' '.join(p.get_text()
                                        for p in content_div.find_all('p'))
            else:
                article_text = content_div.get_text()

            # Call OpenAI API to grade the article
            grading_response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "You will get a text, please grade it on a few criteria. "
                            "1: Customer Service and Care, 2: (Software) Reliability and 3: Responsibility. "
                            "Grade them on a scale from 0 to 2. If you're unable to grade it, please state 'undefined' at the specific criteria. "
                            "Under Headline get the article's headline from the h1, or header. "
                            "Also explain why you chose this score. Return JSON: {\"car_brand\", \"headline\", \"scoring\": {\"customer_service\": {\"grade\", \"explanation\"}, \"reliability\": {\"grade\", \"explanation\"}, \"responsibility\": {\"grade\", \"explanation\"}}}"
                        )
                    },
                    {"role": "user", "content": article_text}
                ]
            )

            # Call OpenAI API to clean the article text
            cleaned_article_response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "Return the article text within one string without linebreaks, with things like: "
                            "'read more after the picture' and 'sign up now' removed."
                        )
                    },
                    {"role": "user", "content": article_text}
                ]
            )

            # Parse the responses from OpenAI
            grading_result = json.loads(
                grading_response.choices[0].message.content)
            cleaned_article = cleaned_article_response.choices[0].message.content

            # Prepare the data for the database
            article_data = {
                'company': grading_result['car_brand'].lower(),
                'headline': grading_result['headline'],
                'content': cleaned_article,
                'score_openai_customer_service': grading_result['scoring']['customer_service']['grade'],
                'ex_score_openai_customer_service': grading_result['scoring']['customer_service']['explanation'],
                'score_openai_reliability': grading_result['scoring']['reliability']['grade'],
                'ex_score_openai_reliability': grading_result['scoring']['reliability']['explanation'],
                'score_openai_responsibility': grading_result['scoring']['responsibility']['grade'],
                'ex_score_openai_responsibility': grading_result['scoring']['responsibility']['explanation']
            }

            # Insert the data into the database
            with get_db_connection() as conn:
                conn.execute(
                    '''INSERT INTO articles 
                    (company, url, headline, content, score_openai_customer_service, ex_score_openai_customer_service, 
                    score_openai_reliability, ex_score_openai_reliability, score_openai_responsibility, ex_score_openai_responsibility) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                    (article_data['company'], url, article_data['headline'], article_data['content'],
                     article_data['score_openai_customer_service'], article_data['ex_score_openai_customer_service'],
                     article_data['score_openai_reliability'], article_data['ex_score_openai_reliability'],
                     article_data['score_openai_responsibility'], article_data['ex_score_openai_responsibility'])
                )
                conn.commit()

            # Redirect to the index page after successful insertion
            return redirect(url_for('index'))

        # Render the create.html template for GET requests
        return render_template('create.html')

    return redirect(url_for('login'))


@app.route('/articles/<int:id>/edit', methods=('GET', 'POST'))
def edit(id):
    if 'logged_in' in session:
        article = get_article(id)

        if request.method == 'POST':
            headline = request.form['headline']
            content = request.form['content']
            url = request.form['url']
            company = request.form['company']
            score_openai_customer_service = request.form['score_openai_customer_service']
            ex_score_openai_customer_service = request.form['ex_score_openai_customer_service']
            score_openai_reliability = request.form['score_openai_reliability']
            ex_score_openai_reliability = request.form['ex_score_openai_reliability']
            score_openai_responsibility = request.form['score_openai_responsibility']
            ex_score_openai_responsibility = request.form['ex_score_openai_responsibility']

            if not headline:
                flash('Headline is required!')
            if not content:
                flash('Content is required!')
            if not url:
                flash('URL is required!')
            if not company:
                flash('Company is required!')
            else:
                conn = get_db_connection()
                conn.execute(
                    'UPDATE articles SET company = ?, url = ?, headline = ?, content = ?, score_openai_customer_service = ?, ex_score_openai_customer_service = ?, score_openai_reliability = ?, ex_score_openai_reliability = ?, score_openai_responsibility = ?, ex_score_openai_responsibility = ?'
                    ' WHERE id = ?',
                    (company, url, headline, content, score_openai_customer_service, ex_score_openai_customer_service,
                     score_openai_reliability, ex_score_openai_reliability, score_openai_responsibility,
                     ex_score_openai_responsibility, id))
                conn.commit()
                conn.close()
                return redirect(url_for('index'))

        return render_template('edit.html', article=article)

    return redirect(url_for('login'))


@app.route('/articles/<int:id>/delete', methods=['POST', ])
def delete(id):
    if 'logged_in' in session:
        article = get_article(id)
        conn = get_db_connection()
        conn.execute('DELETE FROM articles WHERE id = ?', (id,))
        conn.commit()
        conn.close()
        flash('"{}" was successfully deleted!'.format(article['headline']))
        return redirect(url_for('index'))

    return redirect(url_for('login'))


@app.route('/scores')
def scores():
    return render_template('scores.html')


@app.route('/privacy-statement')
def privacy():
    return render_template('privacy.html')


@app.route('/developers')
def developers():
    return render_template('developers.html')


@app.route('/developers/creator')
def iframe_creator():
    return render_template('iframe_creator.html', load_colour_picker=True, company="Score preview")


@app.route('/developers/api_keys')
def api_keys():
    if 'logged_in' in session:
        conn = get_db_connection()
        if session['role'] == 1:
            keys = conn.execute('SELECT * FROM api_keys').fetchall()
        else:
            keys = conn.execute('SELECT * FROM api_keys WHERE account_id = ?', (session['id'],)).fetchall()
        conn.close()
        return render_template('api_keys.html', api_keys=keys)

    return redirect(url_for('login'))


@app.route('/developers/api_keys/<int:id>')
def api_key(id):
    if 'logged_in' in session:
        db_api_key = get_api_key(id)
        return render_template('api_key.html', api_key=db_api_key)

    return redirect(url_for('login'))


@app.route('/developers/api_keys/create', methods=['GET', 'POST'])
def create_api_key():
    if 'logged_in' in session:
        if request.method == 'POST':
            # Get form data
            note = request.form.get('note')
            account_id = session['id']

            # Check if all required fields are provided
            if not note:
                flash('Note is required!')
                return render_template('register.html')
            else:
                hashed_data = note + str(datetime.now().strftime('%Y-%m-%d %H:%M:%S')) + app.secret_key
                hashed_data = hashlib.sha1(hashed_data.encode())
                key = 'sc_api-' + hashed_data.hexdigest()

                with get_db_connection() as conn:
                    conn.execute('INSERT INTO api_keys (key, note, account_id) VALUES (?, ?, ?)',
                                 (key, note, account_id))
                    conn.commit()

                # Redirect to the index page after successful insertion
                flash('Your API key has been created!')
                return redirect(url_for('api_keys'))

        # Render the create.html template for GET requests
        return render_template('create_api_key.html')

    return redirect(url_for('login'))


@app.route('/developers/api_keys/<int:id>/edit', methods=('GET', 'POST'))
def edit_api_key(id):
    if 'logged_in' in session:
        db_api_key = get_api_key(id)

        if request.method == 'POST':
            note = request.form['note']

            if not note:
                flash('Note is required!')
            else:
                conn = get_db_connection()
                conn.execute(
                    'UPDATE api_keys SET note = ?'
                    ' WHERE id = ?',
                    (note, id))
                conn.commit()
                conn.close()
                return redirect(url_for('api_keys'))

        return render_template('edit_api_key.html', api_key=db_api_key)

    return redirect(url_for('login'))


@app.route('/developers/api_keys/<int:id>/delete', methods=['POST', ])
def delete_api_key(id):
    if 'logged_in' in session:
        conn = get_db_connection()
        conn.execute('DELETE FROM api_keys WHERE id = ?', (id,))
        conn.commit()
        conn.close()
        flash('API-key was successfully deleted!')
        return redirect(url_for('api_keys'))

    return redirect(url_for('login'))


@app.route('/api/<key>')
def api(key):
    db_api_key = get_api_key(None, key)
    if db_api_key:
        key_id = db_api_key['id']

        if request.headers.getlist("X-Forwarded-For"):
            client_ip = request.headers.getlist("X-Forwarded-For")[0]
        else:
            client_ip = request.remote_addr

        with get_db_connection() as conn:
            conn.execute('INSERT INTO api_pulls (key, origin) VALUES (?, ?)',
                         (key_id, client_ip))
            conn.commit()

        articles = conn.execute('SELECT * FROM articles').fetchall()
        conn.close()

        car_brand_scores = {}

        articles_list = [dict(article) for article in articles]

        for article in articles_list:
            car_brand = article.get('company')

            if car_brand not in car_brand_scores:
                car_brand_scores[car_brand] = {
                    'customer_service': [int(article.get('score_openai_customer_service'))],
                    'reliability': [int(article.get('score_openai_reliability'))],
                    'responsibility': [int(article.get('score_openai_responsibility'))]
                }
            else:
                car_brand_scores[car_brand]['customer_service'].append(
                    int(article.get('score_openai_customer_service')))
                car_brand_scores[car_brand]['reliability'].append(
                    int(article.get('score_openai_reliability')))
                car_brand_scores[car_brand]['responsibility'].append(
                    int(article.get('score_openai_responsibility')))

        for car_brand, scores in car_brand_scores.items():
            for category in scores:
                scores[category] = mean(scores[category])

        # Check if the request explicitly accepts XML
        if 'application/xml' in request.headers.get('Accept', ''):
            xml_output = xmltodict.unparse(
                {'car_brand_scores': car_brand_scores}, pretty=True)
            return Response(xml_output, mimetype='application/xml')
        else:
            # If the request doesn't specify a preference, or prefers JSON, return JSON
            return jsonify(car_brand_scores)
    return Response(
        "API key not found. Please try again.",
        status=400,
    )


@app.route('/api/integration/')
@app.route('/api/integration/<company>/<key>')
def integration(company=None, key=None):
    color_bg = request.args.get('color-bg', 'white')
    color_container = request.args.get('color-container', 'rosybrown')
    border_color = request.args.get('border-color', 'black')
    score_display = request.args.get('score-display', 'scores-unfilled')
    font_family = request.args.get('font-family', 'Verdana')

    if company and key:
        db_api_key = get_api_key(None, key)
        if db_api_key:
            key_id = db_api_key['id']

            if request.headers.getlist("X-Forwarded-For"):
                client_ip = request.headers.getlist("X-Forwarded-For")[0]
            else:
                client_ip = request.remote_addr

            try:
                with get_db_connection() as conn:
                    conn.execute('INSERT INTO api_pulls (key, origin) VALUES (?, ?)',
                                 (key_id, client_ip))
                    conn.commit()

                    articles = conn.execute('SELECT * FROM articles WHERE LOWER(company) = ?',
                                            (company.lower(),)).fetchall()

                    if articles:
                        car_brand_score = {}
                        articles_list = [dict(article) for article in articles]

                        for article in articles_list:
                            car_brand = article.get('company')
                            if car_brand.lower() not in car_brand_score:
                                car_brand_score[car_brand] = {
                                    'customer_service': [int(article.get('score_openai_customer_service'))],
                                    'reliability': [int(article.get('score_openai_reliability'))],
                                    'responsibility': [int(article.get('score_openai_responsibility'))]
                                }
                            else:
                                car_brand_score[car_brand]['customer_service'].append(
                                    int(article.get('score_openai_customer_service')))
                                car_brand_score[car_brand]['reliability'].append(
                                    int(article.get('score_openai_reliability')))
                                car_brand_score[car_brand]['responsibility'].append(
                                    int(article.get('score_openai_responsibility')))

                        for car_brand, scores in car_brand_score.items():
                            for category in scores:
                                scores[category] = mean(scores[category])

                        return render_template('iframe.html',
                                               company=company,
                                               customer_service=car_brand_score[car_brand]['customer_service'],
                                               reliability=car_brand_score[car_brand]['reliability'],
                                               responsibility=car_brand_score[car_brand]['responsibility'],
                                               color_bg=color_bg,
                                               color_container=color_container,
                                               border_color=border_color,
                                               score_display=score_display,
                                               font_family=font_family,
                                               )

                    return render_template('iframe.html',
                                           company=company,
                                           color_bg=color_bg,
                                           color_container=color_container,
                                           border_color=border_color,
                                           score_display=score_display,
                                           font_family=font_family,
                                           )
            except sqlite3.Error as e:
                return str(e)

    return render_template('iframe.html',
                           company='Score preview',
                           color_bg=color_bg,
                           color_container=color_container,
                           border_color=border_color,
                           score_display=score_display,
                           font_family=font_family,
                           )


@app.route('/contact', methods=['GET', 'POST'])
def contact():
    if request.method == 'POST':
        # Get form data
        name = request.form.get('name')
        subject = request.form.get('subject')
        email = request.form.get('email')
        message = request.form.get('message')

        # Check if all required fields are provided
        if not name or not subject or not email or not message:
            flash('All fields (Name, Subject, Email Address and Message) are required!')
            return render_template('contact.html', name=name, subject=subject, email=email, message=message)
        elif not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            flash('Invalid email address!')
            return render_template('contact.html', name=name, subject=subject, email=email, message=message)
        elif not re.match(r'[A-Za-z0-9]+', name):
            flash('Invalid name!')
            return render_template('contact.html', name=name, subject=subject, email=email, message=message)
        elif not re.match(r'[A-Za-z0-9]+', subject):
            flash('Invalid subject!')
            return render_template('contact.html', name=name, subject=subject, email=email, message=message)
        else:
            port = 465  # For SSL
            smtp_server = "smtp.gmail.com"
            sender_email = os.getenv('SMTP_USER')  # Enter your address
            password = os.getenv('SMTP_PASS')
            receiver_email = email

            msg = MIMEMultipart()
            msg['From'] = sender_email
            msg['To'] = sender_email
            msg['Subject'] = subject
            msg['Reply-To'] = receiver_email

            # Get current datetime
            current_datetime = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            # Format the message with additional info
            formatted_message = f"""\
[{current_datetime}]
Written by: {name}, {email}

{message}"""

            msg.attach(MIMEText(formatted_message, 'plain'))

            # Create a secure SSL context
            context = ssl.create_default_context()

            try:
                with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
                    server.login(sender_email, password)
                    server.sendmail(sender_email, sender_email, msg.as_string())

                flash("Thanks for contacting us, we'll contact you shortly!")
                return render_template('contact.html', name='', subject='', email='', message='')
            except Exception as e:
                flash(f"An error occurred while sending the email: {e}")
                return render_template('contact.html', name=name, subject=subject, email=email, message=message)

    return render_template('contact.html', name='', subject='', email='', message='')


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn


def get_article(id):
    conn = get_db_connection()
    article = conn.execute('SELECT * FROM articles WHERE id = ?',
                           (id,)).fetchone()
    conn.close()
    if article is None:
        flash('Invalid Article ID!')
        return redirect(url_for('index'))
    return article


def get_api_key(id=None, key=None):
    conn = get_db_connection()
    api_key = ''
    if id is not None:
        api_key = conn.execute('SELECT * FROM api_keys WHERE id = ?',
                               (id,)).fetchone()
        conn.close()
        if api_key is None:
            flash('Invalid API key!')
            return redirect(url_for('api_keys'))
    elif key is not None:
        conn = get_db_connection()
        api_key = conn.execute('SELECT * FROM api_keys WHERE key = ?',
                               (key,)).fetchone()
        conn.close()
    return api_key


def get_account(username, password=None):
    conn = get_db_connection()
    if password is None:
        user = conn.execute('SELECT * FROM accounts WHERE username = ?',
                            (username,)).fetchone()
    else:
        user = conn.execute('SELECT * FROM accounts WHERE username = ? AND password = ?',
                            (username, password)).fetchone()

    return user


def create_bar_chart(df):
    # Group by month and count occurrences
    df['month'] = df['created'].dt.to_period('M')
    usage_per_month = df.groupby('month').size()

    # Plotting
    fig, ax = plt.subplots()
    usage_per_month.plot(kind='bar', ax=ax)

    # Format x-axis labels as 'MM-YYYY'
    labels = [month.strftime('%m-%Y') for month in usage_per_month.index.to_timestamp()]
    ax.set_xticklabels(labels, rotation=45)  # Rotate labels for better readability
    ax.set_title('Usage per Month')
    ax.set_xlabel('Month')
    ax.set_ylabel('Usage')

    # Convert plot to base64 for embedding in HTML
    img = io.BytesIO()
    fig.savefig(img, format='png')
    img.seek(0)
    base64_img = base64.b64encode(img.getvalue()).decode('utf8')
    plt.close(fig)

    return base64_img

def create_pie_chart(df):
    key_counts = df['key'].value_counts()

    fig, ax = plt.subplots()
    key_counts.plot(kind='pie', autopct='%1.1f%%', ax=ax)
    ax.set_title('Usage by Key')

    # Save the figure to a BytesIO object
    img = io.BytesIO()
    fig.savefig(img, format='png')
    img.seek(0)
    base64_img = base64.b64encode(img.getvalue()).decode('utf8')
    plt.close(fig)

    return base64_img


def get_top_origins(df):
    top_origins = df['origin'].value_counts().head(5)
    return top_origins.to_dict()


def save_fig_to_base64(fig):
    img = io.BytesIO()
    fig.savefig(img, format='png')
    img.seek(0)
    base64_img = base64.b64encode(img.getvalue()).decode('utf8')
    plt.close(fig)
    return base64_img

if __name__ == "__main__":
    app.run(host='0.0.0.0')
